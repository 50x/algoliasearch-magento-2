
<script type="text/javascript">
    //<![CDATA[

    requirejs(['algoliaBundle'], function(algoliaBundle) {
        algoliaBundle.$(function ($) {
            algoliaConfig.autocomplete.templates = {
                suggestions: algoliaBundle.Hogan.compile($('#autocomplete_suggestions_template').html()),
                products: algoliaBundle.Hogan.compile($('#autocomplete_products_template').html()),
                categories: algoliaBundle.Hogan.compile($('#autocomplete_categories_template').html()),
                pages: algoliaBundle.Hogan.compile($('#autocomplete_pages_template').html()),
                additionnalSection: algoliaBundle.Hogan.compile($('#autocomplete_extra_template').html())
            };

            var algolia_client = algoliaBundle.algoliasearch(algoliaConfig.applicationId, algoliaConfig.apiKey);

            if (algoliaConfig.instant.enabled && (algoliaConfig.isSearchPage || !algoliaConfig.autocomplete.enabled))
            {
                if ($(algoliaConfig.instant.selector).length <= 0)
                    throw '[Algolia] Invalid instant-search selector: ' + algoliaConfig.instant.selector;

                if (algoliaConfig.autocomplete.enabled && $(algoliaConfig.instant.selector).find(algoliaConfig.autocomplete.selector).length > 0)
                    throw '[Algolia] You can\'t have a search input matching "' + algoliaConfig.autocomplete.selector +
                    '" inside you instant selector "' + algoliaConfig.instant.selector + '"';

                var instant_selector = !algoliaConfig.autocomplete.enabled ? ".algolia-search-input" : "#instant-search-bar";

                var wrapperTemplate = algoliaBundle.Hogan.compile($('#instant_wrapper_template').html());

                var findAutocomplete = algoliaConfig.autocomplete.enabled && $(algoliaConfig.instant.selector).find('#algolia-autocomplete-container').length > 0;

                if (findAutocomplete) {
                    $(algoliaConfig.instant.selector).find('#algolia-autocomplete-container').remove();
                }

                var div = document.createElement('div');
                $(div).addClass('algolia-instant-results-wrapper');
                $(algoliaConfig.instant.selector).addClass('algolia-instant-replaced-content');
                $(algoliaConfig.instant.selector).wrap(div);
                $('.algolia-instant-results-wrapper').append('<div class="algolia-instant-selector-results"></div>');

                $('.algolia-instant-selector-results').html(wrapperTemplate.render({second_bar: algoliaConfig.autocomplete.enabled, findAutocomplete: findAutocomplete})).show();

                /** Initialise instant search **/
                var search = algoliaBundle.instantsearch({
                    appId: algoliaConfig.applicationId,
                    apiKey: algoliaConfig.apiKey,
                    indexName: algoliaConfig.indexName + '_products',
                    urlSync: {
                        useHash: true,
                        trackedParameters: ['query', 'page', 'attribute:*', 'index']
                    }
                });

                search.addWidget({
                    getConfiguration: function () {
                        if (algoliaConfig.request.query.length > 0 && location.hash.length < 1) {
                            return { query: algoliaConfig.request.query }
                        }
                        return {};
                    },
                    init: function(data) {
                        if (algoliaConfig.request.refinement_key.length > 0) {
                            data.helper.toggleRefine(algoliaConfig.request.refinement_key, algoliaConfig.request.refinement_value);
                        }

                        if (algoliaConfig.isCategoryPage) {
                            data.helper.addNumericRefinement('visibility_catalog', '=', 1);
                        }
                        else {
                            data.helper.addNumericRefinement('visibility_search', '=', 1);
                        }
                    },
                    render: function (data) {
                        if (! algoliaConfig.isSearchPage) {
                            if (data.results.query.length === 0) {
                                $('.algolia-instant-replaced-content').show();
                                $('.algolia-instant-selector-results').hide();
                            }
                            else {
                                $('.algolia-instant-replaced-content').hide();
                                $('.algolia-instant-selector-results').show();
                            }
                        }
                    }
                });

                /** Search bar **/
                search.addWidget(
                    algoliaBundle.instantsearch.widgets.searchBox({
                        container: instant_selector,
                        placeholder: '<?php echo __('Search for products'); ?>'
                    })
                );

                /** Stats **/
                search.addWidget(
                    algoliaBundle.instantsearch.widgets.stats({
                        container: '#algolia-stats',
                        templates: {
                            body: $('#instant-stats-template').html()
                        },
                        transformData: function (data) {
                            data.first = data.page * data.hitsPerPage + 1;
                            data.last = Math.min(data.page * data.hitsPerPage + data.hitsPerPage, data.nbHits);
                            data.seconds = data.processingTimeMS / 1000;

                            return data;
                        }
                    })
                );

                /** Sorts **/
                algoliaConfig.sortingIndices.unshift({
                    name: algoliaConfig.indexName + '_products',
                    label: '<?php echo __('Relevance'); ?>'
                });

                search.addWidget(
                    algoliaBundle.instantsearch.widgets.sortBySelector({
                        container: '#algolia-sorts',
                        indices: algoliaConfig.sortingIndices,
                        cssClass: 'form-control'
                    })
                );

                /** Hits **/
                search.addWidget(
                    algoliaBundle.instantsearch.widgets.hits({
                        container: '#instant-search-results-container',
                        templates: {
                            item: $('#instant-hit-template').html()
                        },
                        transformData: {
                            item: function (hit) {
                                hit = transformHit(hit, algoliaConfig.priceKey);
                                hit.isAddToCartEnabled = algoliaConfig.instant.isAddToCartEnabled;

                                return hit;
                            }
                        },
                        hitsPerPage: algoliaConfig.hitsPerPage
                    })
                );

                search.addWidget({
                    suggestions: [],
                    init: function () {
                        if (algoliaConfig.showSuggestionsOnNoResultsPage) {
                            var $this = this;
                            $.each(algoliaConfig.popularQueries.slice(0, Math.min(4, algoliaConfig.popularQueries.length)), function (i, query) {
                                query = $('<div>').html(query).text(); //xss
                                $this.suggestions.push('<a href="' + algoliaConfig.baseUrl + '/catalogsearch/result/?q=' + encodeURIComponent(query) + '">' + query + '</a>');
                            });
                        }
                    },
                    render: function (data) {
                        if (data.results.hits.length === 0) {
                            var content = '<div class="no-results">';
                            content += '<div><b><?php echo __('No products for query'); ?> "' + $("<div>").text(data.results.query).html() + '</b>"</div>';
                            content += '<div class="popular-searches">';

                            if (algoliaConfig.showSuggestionsOnNoResultsPage && this.suggestions.length > 0) {
                                content += '<div><?php echo __('You can can try one of the popular search queries'); ?></div>' + this.suggestions.join(', ');
                            }

                            content += '</div>';
                            if (algoliaConfig.showSuggestionsOnNoResultsPage && this.suggestions.length > 0) {
                                content += '<?php echo __('or'); ?>';
                            }
                            content += ' <a href="' + algoliaConfig.baseUrl + '/catalogsearch/result/?q=__empty__"><?php echo __('See all products'); ?></a>'

                            content += '</div>';

                            $('#instant-search-results-container').html(content);
                        }
                    }
                });

                /** Facets **/
                var wrapper = document.getElementById('instant-search-facets-container');

                var attributes = [];

                $.each(algoliaConfig.facets, function (i, facet) {
                    var name = facet.attribute;

                    if (name === 'categories') {
                        if (algoliaConfig.isCategoryPage) {
                            return;
                        }
                        name = 'categories.level0';
                    }

                    if (name === 'price') {
                        name = facet.attribute + algoliaConfig.priceKey
                    }

                    attributes.push({
                        name: name,
                        label: facet.label ? facet.label : facet.attribute
                    });
                });

                search.addWidget(
                    algoliaBundle.instantsearch.widgets.currentRefinedValues({
                        container: '#current-refinements',
                        cssClasses: {
                            root: 'facet'
                        },
                        templates: {
                            header: '<div class="name">' + '<?php echo __('Selected Filters'); ?>' + '</div>',
                            item: $('#current-refinements-template').html()
                        },
                        attributes: attributes,
                        onlyListedAttributes: true
                    })
                );

                var customAttributeFacet = {
                    categories: function(facet, templates) {
                        var hierarchical_levels = [];
                        for (var l = 0; l < 10; l++)
                            hierarchical_levels.push('categories.level' + l.toString());

                        var hierarchicalMenuParams = {
                            container: facet.wrapper.appendChild(document.createElement('div')),
                            attributes: hierarchical_levels,
                            separator: ' /// ',
                            alwaysGetRootLevel: true,
                            templates: templates,
                            sortBy: ['name:asc'],
                            cssClasses: {
                                list: 'hierarchical',
                                root: 'facet hierarchical'
                            }
                        };

                        hierarchicalMenuParams.templates.item = '' +
                            '<div class="ais-hierearchical-link-wrapper">' +
                            '<a class="{{cssClasses.link}}" href="{{url}}">{{name}}' +
                            '{{#isRefined}}<img class="cross-circle" src="<?php echo $block->getViewFileUrl('Algolia_AlgoliaSearch::cross-circle.png'); ?>"/>{{/isRefined}}' +
                            '<span class="{{cssClasses.count}}">{{#helpers.formatNumber}}{{count}}{{/helpers.formatNumber}}</span></a>' +
                            '</div>';

                        if (algoliaConfig.request.path.length > 0) {
                            hierarchicalMenuParams.rootPath = algoliaConfig.request.path;
                        }

                        return algoliaBundle.instantsearch.widgets.hierarchicalMenu(hierarchicalMenuParams);
                    }
                };

                $.each(algoliaConfig.facets, function (i, facet) {

                    if (facet.attribute.indexOf("price") !== -1)
                        facet.attribute = facet.attribute + algoliaConfig.priceKey;

                    facet.wrapper = wrapper;

                    var templates = {
                        header: '<div class="name">' + (facet.label ? facet.label : facet.attribute) + '</div>'
                    };

                    var widget = customAttributeFacet[facet.attribute] !== undefined ?
                        customAttributeFacet[facet.attribute](facet, templates) :
                        getFacetWidget(facet, templates);

                    search.addWidget(widget);
                });

                /** Pagination **/
                search.addWidget(
                    algoliaBundle.instantsearch.widgets.pagination({
                        container: '#instant-search-pagination-container',
                        cssClass: 'algolia-pagination',
                        showFirstLast: false,
                        maxPages: 1000,
                        labels: {
                            previous: '<?php echo __('Previous page'); ?>',
                            next: '<?php echo __('Next page'); ?>'
                        },
                        scrollTo: 'body'
                    })
                );

                function startInstantSearch() {
                    search.start();

                    handleInputCrossInstant($(instant_selector));

                    var instant_search_bar = $(instant_selector);
                    if (instant_search_bar.is(":focus") === false) {
                        focusInstantSearchBar(search, instant_search_bar);
                    }

                    if (algoliaConfig.autocomplete.enabled) {
                        $('#search_mini_form').addClass('search-page');
                    }

                    $(document).on('click', '.ais-hierarchical-menu--link, .ais-refinement-list--checkbox', function () {
                        focusInstantSearchBar(search, instant_search_bar);
                    });
                }

                if (algoliaConfig.isSearchPage) {
                    startInstantSearch();
                }
                else {
                    (function () {
                        var isStarted = false;

                        $(instant_selector).one('focus', (function () {
                            if (!isStarted) {
                                startInstantSearch();
                            }
                            isStarted = true;
                        }));
                    })();
                }
            }

            /*****************
             **
             ** AUTOCOMPLETION MENU
             **
             *****************/

            /** keep it after instant search to be able to bind to the recreated <div id="algolia-autocomplete-container"></div> **/
            if (algoliaConfig.autocomplete.enabled) {
                var sources = [];

                /** Add products and categories that are required sections **/
                var nb_cat = algoliaConfig.autocomplete.nbOfCategoriesSuggestions >= 1 ? algoliaConfig.autocomplete.nbOfCategoriesSuggestions: 2;
                var nb_pro = algoliaConfig.autocomplete.nbOfProductsSuggestions >= 1 ? algoliaConfig.autocomplete.nbOfProductsSuggestions : 6;
                var nb_que = algoliaConfig.autocomplete.nbOfQueriesSuggestions >= 0 ? algoliaConfig.autocomplete.nbOfQueriesSuggestions : 0;

                if (nb_que > 0) {
                    algoliaConfig.autocomplete.sections.unshift({ hitsPerPage: nb_que, label: '', name: "suggestions"});
                }

                algoliaConfig.autocomplete.sections.unshift({ hitsPerPage: nb_cat, label: <?php echo json_encode(__('Categories')); ?>, name: "categories"});
                algoliaConfig.autocomplete.sections.unshift({ hitsPerPage: nb_pro, label: <?php echo json_encode(__('Products')); ?>, name: "products"});

                var i = 0;
                $.each(algoliaConfig.autocomplete.sections, function (name, section) {
                    var source = getAutocompleteSource(section, algolia_client, $, i);

                    if (source)
                        sources.push(source);

                    /* Those sections have already specific placeholder, so do not use the default aa-dataset-{i} class */
                    if (section.name !== 'suggestions' && section.name !== 'products')
                        i++;

                });

                // setup the auto-completed search input
                $(algoliaConfig.autocomplete.selector).each(function (i) {
                    var menu = $(this);
                    var options = {
                        hint: false,
                        templates: {
                            dropdownMenu: '#menu-template'
                        },
                        dropdownMenuContainer: "#algolia-autocomplete-container",
                        debug: true
                    };

                    if (algoliaConfig.removeBranding === false) {
                        options.templates.footer = '<div class="footer_algolia"><span>Search by</span> <a href="https://www.algolia.com/?utm_source=magento&utm_medium=link&utm_campaign=magento_autocompletion_menu" target="_blank"><img src="<?php echo $block->getViewFileUrl('Algolia_AlgoliaSearch::algolia-logo.png'); ?>" /></a></div>';
                    }

                    $(this)
                        .autocomplete(options, sources)
                        .parent()
                        .attr('id', 'algolia-autocomplete-tt')
                        .on('autocomplete:updated', function (e) {
                            fixAutocompleteCssSticky(menu);
                        })
                        .on('autocomplete:updated', function (e) {
                            fixAutocompleteCssHeight(menu);
                        });

                    $(window).resize(function () {
                        fixAutocompleteCssSticky(menu);
                    });
                });
            }
        });
    });

    //]]>
</script>